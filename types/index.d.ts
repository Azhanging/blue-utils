import * as time from "./time";
import * as countDown from "./count-down";
declare const _default: {
    debounce(hookHandler: Function, delay?: number): Function;
    throttle(hookHandler: Function, delay?: number): Function;
    hook(context: any, cb: any, args?: any[]): any;
    each(obj: any, cb: Function, isReturn?: boolean): void | any[];
    deepCopy(obj: any): any;
    extend(...args: any[]): any;
    genGuid(): string;
    objectToArray<V>(object: {
        [key: string]: V;
    }): V[];
    arrayToObject<Item, Key extends keyof Item>(array: Item[], key: Key): { [key in keyof Item]?: Item; };
    getObjLen(obj: any): number;
    getObjKeys(object: any): void | any[];
    promise(hookHandler: Function): Promise<any>;
    getRegExp(expr: any): string;
    prefixZero(time: number): string;
    genCountDownViewDate(diffTime: number): {
        day: string;
        hours: string;
        minutes: string;
        second: string;
    };
    formatDate(date: string | number | Date, format: string): string;
    getDate(date: string | number | Date): time.TResultDate;
    getYear(time: string | number | Date): number;
    getMonth(time: string | number | Date): number;
    getDay(time: string | number | Date): number;
    getHours(time: string | number | Date): number;
    getMinutes(time: string | number | Date): number;
    getSeconds(time: string | number | Date): number;
    getTime(time: string | number | Date): number;
    timestamp(time: string | number | Date): number;
    diffTime(opts: {
        currentTime: string | number | Date;
        targetTime: string | number | Date;
        diffTime: number;
        condition: ">" | ">=" | "<" | "<=";
    }): boolean;
    CountDown: typeof countDown.CountDown;
    getLinkParams(link: string): string;
    getNotParamsLink(link?: string): string;
    parseParams(queryString: string, decode?: boolean): any;
    stringifyParams(query: any, encode?: boolean): string;
    isEmptyPlainObject(object: any): boolean;
    isStr(val: any): boolean;
    isPlainObject(object: any): boolean;
    isArray(val: any): boolean;
    isObject(object: any): boolean;
    isDef(val: any): boolean;
    isUndef(val: any): boolean;
    isEmptyStr(val: string): boolean;
    isTrue(bool: any): boolean;
    isFalse(bool: any): boolean;
    isFunction(fn: any): boolean;
    isError(error: any): boolean;
    isBoolean(bool: any): boolean;
};
export default _default;
